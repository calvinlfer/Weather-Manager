tables {
  members {
    name = "forecast-members"
    name = ${?MEMBER_TABLE}
  }

  password-reset {
    name = "forecast-password-reset"
    name = ${?PASSWORD_RESET_TABLE}
  }
}

email {
  smtp-server = "smtp.gmail.com"
  smtp-server = ${?SMTP_SERVER}

  smtp-port = 587
  smtp-port = ${?SMTP_PORT}

  sender-email = "example@gmail.com"
  sender-email = ${?SENDER_EMAIL}

  password = "example-password"
  password = ${?SENDER_PASSWORD}
}

//dynamodb {
//  aws-access-key-id = "dev"
//  aws-secret-access-key = "dev"
//  endpoint = "http://localhost:8000"
//}

openweather {
  api-key = "example-api-key"
  api-key = ${?OPENWEATHER_API_KEY}
}

secrets {
  jwt-key = "change-me-please"
  jwt-key = ${?JWT_SECRET}

  jwt-token-duration-seconds = 36000
  jwt-token-duration-seconds = ${?JWT_EXPIRY}
}

akka {
  actor {
    provider = "cluster"
  }

  loglevel = INFO
  stdout-loglevel = INFO
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  http {
    server {
      request-timeout = 5 seconds
    }
  }

  remote {
    netty.tcp {
      hostname = "127.0.0.1"
      port = 2551
    }
  }

  cluster {
    seed-nodes = ["akka.tcp://weather-manager@127.0.0.1:2551"]

    // TODO: switch to using ddata (remember to not run both applications in the same folder because it will try to share internal state)
    sharding {
      state-store-mode = "persistence"
    }
  }

  persistence {
    journal {
      plugin = "cassandra-journal"
    }

    snapshot-store {
      plugin = "cassandra-snapshot-store"
    }
  }
}

cassandra-journal {
  contact-points = ["127.0.0.1"]
}

members {
  sharding {
    number-of-shards = 20
  }
}
